import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import re

# === Load CSV ===
csv_path = "OAP_analysis_overview.csv"
df = pd.read_csv(csv_path)

param_col = "AVERAGE POWER PER ORBIT [W]"

# Filenames to include (your list)
files_plot = [
    "orbit_500_ltan_9_output_SUN_GS_output.txt",
    "orbit_500_ltan_9_output_SUN_NADIR_output.txt",
    "orbit_500_ltan_9_output_SUN_VELOCITY_output.txt",
    "orbit_500_ltan_9_output_VELOCITY_GS_output.txt",
    "orbit_500_ltan_9_output_VELOCITY_NADIR_output.txt",
    "orbit_500_ltan_9_output_VELOCITY_SUN_output.txt",
    "orbit_600_ltan_12_output_SUN_GS_output.txt",
    "orbit_600_ltan_12_output_SUN_NADIR_output.txt",
    "orbit_600_ltan_12_output_SUN_VELOCITY_output.txt",
    "orbit_600_ltan_12_output_VELOCITY_GS_output.txt",
    "orbit_600_ltan_12_output_VELOCITY_NADIR_output.txt",
    "orbit_600_ltan_12_output_VELOCITY_SUN_output.txt",
    "orbit_600_ltan_15_output_SUN_GS_output.txt",
    "orbit_600_ltan_15_output_SUN_NADIR_output.txt",
    "orbit_600_ltan_15_output_SUN_VELOCITY_output.txt",
    "orbit_600_ltan_15_output_VELOCITY_GS_output.txt",
    "orbit_600_ltan_15_output_VELOCITY_NADIR_output.txt",
    "orbit_600_ltan_15_output_VELOCITY_SUN_output.txt",
    "orbit_600_ltan_9_output_SUN_GS_output.txt",
    "orbit_600_ltan_9_output_SUN_NADIR_output.txt",
    "orbit_600_ltan_9_output_SUN_VELOCITY_output.txt",
    "orbit_600_ltan_9_output_VELOCITY_GS_output.txt",
    "orbit_600_ltan_9_output_VELOCITY_NADIR_output.txt",
    "orbit_600_ltan_9_output_VELOCITY_SUN_output.txt",
    "orbit_500_ltan_12_output_SUN_GS_output.txt",
    "orbit_500_ltan_12_output_SUN_NADIR_output.txt",
    "orbit_500_ltan_12_output_SUN_VELOCITY_output.txt",
    "orbit_500_ltan_12_output_VELOCITY_GS_output.txt",
    "orbit_500_ltan_12_output_VELOCITY_NADIR_output.txt",
    "orbit_500_ltan_12_output_VELOCITY_SUN_output.txt",
    "orbit_500_ltan_15_output_SUN_GS_output.txt",
    "orbit_500_ltan_15_output_SUN_NADIR_output.txt",
    "orbit_500_ltan_15_output_SUN_VELOCITY_output.txt",
    "orbit_500_ltan_15_output_VELOCITY_GS_output.txt",
    "orbit_500_ltan_15_output_VELOCITY_NADIR_output.txt",
    "orbit_500_ltan_15_output_VELOCITY_SUN_output.txt",
]

# Keep only those files
sub = df[df["File"].isin(files_plot)].copy()

# Parse filename -> Altitude, LTAN, Mode
pat = re.compile(r"orbit_(\d+)_ltan_(\d+)_output_(.+?)_output\.txt")
def parse_parts(fname):
    m = pat.match(fname)
    if not m:
        return None, None, None
    alt, ltan, mode = m.groups()
    return int(alt), int(ltan), mode

sub[["Altitude","LTAN","Mode"]] = sub["File"].apply(lambda f: pd.Series(parse_parts(f)))

# Orders
ltan_order = sorted(sub["LTAN"].unique())
mode_order = ["SUN_GS","SUN_NADIR","SUN_VELOCITY","VELOCITY_GS","VELOCITY_NADIR","VELOCITY_SUN"]
alt_order  = [500, 600]

# Shortened mode labels for the minor ticks
mode_short = {
    "SUN_GS":"SGS", "SUN_NADIR":"SND", "SUN_VELOCITY":"SV",
    "VELOCITY_GS":"VGS", "VELOCITY_NADIR":"VNA", "VELOCITY_SUN":"VS"
}

# Pastel colours by MODE
mode_colors = {
    "SUN_GS":          "#aec7e8",
    "SUN_NADIR":       "#ffbb78",
    "SUN_VELOCITY":    "#98df8a",
    "VELOCITY_GS":     "#ff9896",
    "VELOCITY_NADIR":  "#c5b0d5",
    "VELOCITY_SUN":    "#c49c94",
}
# Hatching by altitude
alt_hatch = {500: "", 600: "//"}

# Geometry
bar_w   = 0.08
pair_gap = 0.01          # between 500/600 within a mode
mode_gap = 0.05          # between modes within LTAN
group_gap = 0.20         # between LTAN groups

# Build bars + tick positions
bars = []                # (x, y, facecolor, hatch)
group_centers = []       # for LTAN labels (major ticks)
minor_centers = []       # for mode labels (minor ticks)
minor_labels  = []

x_cursor = 0.0
for lt in ltan_order:
    start_of_group = x_cursor
    for mode in mode_order:
        # Bars for 500/600 at this mode
        for i, alt in enumerate(alt_order):
            x = x_cursor + i * (bar_w + pair_gap)
            match = sub[(sub["LTAN"] == lt) & (sub["Mode"] == mode) & (sub["Altitude"] == alt)]
            y = float(match.iloc[0][param_col]) if not match.empty else np.nan
            bars.append((x, y, mode_colors.get(mode, "#cccccc"), alt_hatch[alt]))
        # Center of this 500/600 pair for minor label
        mode_center = x_cursor + (bar_w + pair_gap) * 0.5
        minor_centers.append(mode_center)
        minor_labels.append(mode_short.get(mode, mode))
        x_cursor += 2*(bar_w + pair_gap) + mode_gap
    # span of this LTAN (subtract trailing mode_gap)
    group_span = 6 * (2*(bar_w + pair_gap) + mode_gap) - mode_gap
    group_centers.append(start_of_group + group_span / 2.0)
    x_cursor += group_gap

# === Plot with extra margins so labels/legend don’t collide ===
fig, ax = plt.subplots(figsize=(18, 7))

# Bars
for x, h, color, hatch in bars:
    ax.bar(x, h, width=bar_w, color=color, edgecolor="black", linewidth=0.5, hatch=hatch)

# Major ticks: LTANs (push down a bit so they don't overlay minor labels)
ax.set_xticks(group_centers)
ax.set_xticklabels([f"LTAN {lt}" for lt in ltan_order])
ax.tick_params(axis="x", which="major", pad=28, labelsize=11)

# Minor ticks: short mode labels under each LTAN group
ax.set_xticks(minor_centers, minor=True)
ax.set_xticklabels(minor_labels, minor=True)
ax.tick_params(axis="x", which="minor", pad=8, labelsize=9, length=0)

# Labels, title, grid
ax.set_xlabel("LTAN (each group shows modes; 500/600 bars per mode)")
ax.set_ylabel(param_col)
ax.set_title("Average Power per Orbit — Grouped by LTAN (Mode-coloured; 600 km hatched)")
ax.grid(axis="y", linestyle="--", alpha=0.7)

# Legends placed outside on the right
mode_handles = [plt.Rectangle((0,0),1,1, facecolor=mode_colors[m], edgecolor="black", linewidth=0.5) for m in mode_order]
alt_handles  = [plt.Rectangle((0,0),1,1, facecolor="#dddddd", edgecolor="black", linewidth=0.5, hatch=alt_hatch[a]) for a in alt_order]

first_legend = ax.legend(mode_handles, mode_order, title="Operational Mode",
                         loc="upper left", bbox_to_anchor=(1.02, 1))
ax.add_artist(first_legend)
ax.legend(alt_handles, [f"{a} km" for a in alt_order], title="Altitude",
          loc="lower left", bbox_to_anchor=(1.02, 0))

# Make room on the right for legends and on the bottom for the two-tier ticks
plt.subplots_adjust(right=0.80, bottom=0.22)

# Save
out_path = "plot_modes_grouped_by_ltan_mode_coloured_with_mode_labels_v2.png"
plt.savefig(out_path, dpi=300)
plt.close()

print(f"Saved {out_path}")
