# save as make_pastel_by_altitude.py
import pandas as pd
import matplotlib.pyplot as plt
import re
from math import isfinite

FILE = "aggregated_power_orbit_table_all_modes.csv"

# --- Load ---
df = pd.read_csv(FILE)
power_row = df.iloc[4, 1:]  # "AVERAGE POWER PER ORBIT [W]" row, skip label col

# --- Parse columns -> Altitude, LTAN, Mode, Power ---
rec = []
pat = re.compile(r"orbit_(\d+)_ltan_(\d+)_output_(.+?)_output\.txt")
for col, val in power_row.items():
    m = pat.match(col)
    if not m:
        continue
    try:
        p = float(val)
        if not isfinite(p):
            continue
    except Exception:
        continue
    rec.append({
        "Altitude": int(m.group(1)),
        "LTAN": int(m.group(2)),
        "Mode": m.group(3),
        "Power": float(val),
    })
dfp = pd.DataFrame(rec)

# --- Pastel palettes (stable) ---
PASTEL_MODES = [
    "#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5",
    "#c49c94","#f7b6d2","#c7c7c7","#dbdb8d","#9edae5"
]
PASTEL_LTAN = ["#aec7e8","#ffbb78","#98df8a","#ff9896","#c5b0d5","#c49c94"]

def save_grouped_by_ltan(alt, filename):
    dfa = dfp[dfp["Altitude"] == alt].copy()
    if dfa.empty:
        print(f"No data for {alt} km")
        return
    ltan_order = sorted(dfa["LTAN"].unique())
    mode_order = sorted(dfa["Mode"].unique())
    mode_colors = {m: PASTEL_MODES[i % len(PASTEL_MODES)] for i, m in enumerate(mode_order)}

    bar_w = 0.10
    x = range(len(ltan_order))
    plt.figure(figsize=(11, 6))
    for i, mode in enumerate(mode_order):
        sub = dfa[dfa["Mode"] == mode].set_index("LTAN").reindex(ltan_order)
        xpos = [xx + i*bar_w for xx in x]
        plt.bar(xpos, sub["Power"], width=bar_w, label=mode,
                color=mode_colors[mode], edgecolor="black", linewidth=0.5)

    plt.xticks([xx + bar_w*(len(mode_order)-1)/2 for xx in x], [f"LTAN {lt}" for lt in ltan_order])
    plt.xlabel("LTAN")
    plt.ylabel("Average Power per Orbit [W]")
    plt.title(f"Average Power per Orbit by LTAN (Altitude {alt} km, Pastel)")
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    plt.legend(title="Operational Mode", bbox_to_anchor=(1.02, 1), loc="upper left")
    plt.tight_layout()
    plt.savefig(filename, dpi=300)
    plt.close()
    print(f"Saved {filename}")

def save_grouped_by_mode(alt, filename):
    dfa = dfp[dfp["Altitude"] == alt].copy()
    if dfa.empty:
        print(f"No data for {alt} km")
        return
    ltan_order = sorted(dfa["LTAN"].unique())
    mode_order = sorted(dfa["Mode"].unique())
    ltan_colors = {lt: PASTEL_LTAN[i % len(PASTEL_LTAN)] for i, lt in enumerate(ltan_order)}

    bar_w = 0.10
    x = range(len(mode_order))
    plt.figure(figsize=(11, 6))
    for i, lt in enumerate(ltan_order):
        sub = dfa[dfa["LTAN"] == lt].set_index("Mode").reindex(mode_order)
        xpos = [xx + i*bar_w for xx in x]
        plt.bar(xpos, sub["Power"], width=bar_w, label=f"LTAN {lt}",
                color=ltan_colors[lt], edgecolor="black", linewidth=0.5)

    plt.xticks([xx + bar_w*(len(ltan_order)-1)/2 for xx in x], mode_order, rotation=30, ha="right")
    plt.xlabel("Operational Mode")
    plt.ylabel("Average Power per Orbit [W]")
    plt.title(f"Average Power per Orbit by Operational Mode (Altitude {alt} km, Pastel)")
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    plt.legend(title="LTAN", bbox_to_anchor=(1.02, 1), loc="upper left")
    plt.tight_layout()
    plt.savefig(filename, dpi=300)
    plt.close()
    print(f"Saved {filename}")

# --- Generate four figures ---
save_grouped_by_ltan(500, "power_by_ltan_500_pastel.png")
save_grouped_by_mode(500, "power_by_mode_500_pastel.png")
save_grouped_by_ltan(600, "power_by_ltan_600_pastel.png")
save_grouped_by_mode(600, "power_by_mode_600_pastel.png")
