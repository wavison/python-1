# srs4_downlink_analysis.py

import matplotlib.pyplot as plt
import numpy as np

# === CONFIG ===
symbol_rate = 5       # Msps for BPSK downlink
spectral_eff = 1.0    # BPSK = 1 bps/Hz
rs_eff = 223 / 255
crc_eff = 0.956
cc_rate = 0.5
efficiency = rs_eff * crc_eff * cc_rate  # Total efficiency (~0.418)

net_rate = symbol_rate * spectral_eff * efficiency  # Net Mbps
pass_durations = [5 * 60, 10 * 60, 15 * 60]  # seconds
data_volumes = [net_rate * t / 8 for t in pass_durations]  # MB

# === REQUIRED DAILY TLM ===
daily_tlm_mb = 80
margin = 0.20
required_mb = daily_tlm_mb * (1 + margin)

# === PLOT ===
x = np.arange(len(pass_durations))
fig, ax = plt.subplots(figsize=(8, 6))
ax.bar(x, data_volumes, width=0.4, label="Downlink Capacity (MB)", color='steelblue')
ax.axhline(required_mb, color="red", linestyle="--", label=f"Required TLM: {required_mb:.0f} MB")

ax.set_xticks(x)
ax.set_xticklabels(["5 min", "10 min", "15 min"])
ax.set_ylabel("Data Volume (MB)")
ax.set_title("SRS-4 Downlink Capacity (BPSK with RS + CC + CRC)")
ax.legend()
ax.grid(axis="y")
plt.tight_layout()
plt.show()


# srs4_uplink_analysis.py

import matplotlib.pyplot as plt
import numpy as np

# === CONFIG ===
uplink_classes = {
    "Low (128 kbps)": 0.128,
    "Nominal (256 kbps)": 0.256,
    "High (512 kbps)": 0.512
}
spectral_eff = 1.5  # QPSK 3/4
rs_eff = 223 / 255
crc_eff = 0.956
cc_rate = 0.75  # 3/4 coding
efficiency = rs_eff * crc_eff * cc_rate  # ~0.627

pass_durations = [5 * 60, 10 * 60, 15 * 60]  # seconds

# === CALCULATE UPLINK VOLUMES ===
uplink_results = {}
for label, sym_rate in uplink_classes.items():
    gross_rate = sym_rate * spectral_eff  # Mbps
    net_rate = gross_rate * efficiency    # Mbps
    volumes = [net_rate * t / 8 for t in pass_durations]  # MB
    uplink_results[label] = volumes

# === PLOT ===
x = np.arange(len(pass_durations))
width = 0.25

fig, ax = plt.subplots(figsize=(10, 6))
for i, (label, volumes) in enumerate(uplink_results.items()):
    ax.bar(x + i * width, volumes, width, label=label)

ax.set_xticks(x + width)
ax.set_xticklabels(["5 min", "10 min", "15 min"])
ax.set_ylabel("Uplink Capacity (MB)")
ax.set_title("SRS-4 Uplink Capacity (QPSK 3/4 with RS + CRC)")
ax.legend()
ax.grid(axis="y")
plt.tight_layout()
plt.show()


