# save as make_altitude_pairs.py
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import re
from math import isfinite

FILE = "aggregated_power_orbit_table_all_modes.csv"

# --- Load ---
df = pd.read_csv(FILE)
power_row = df.iloc[4, 1:]  # "AVERAGE POWER PER ORBIT [W]"

# --- Parse columns ---
rec = []
pat = re.compile(r"orbit_(\d+)_ltan_(\d+)_output_(.+?)_output\.txt")
for col, val in power_row.items():
    m = pat.match(col)
    if not m:
        continue
    try:
        p = float(val)
        if not isfinite(p):
            continue
    except Exception:
        continue
    rec.append({
        "Altitude": int(m.group(1)),
        "LTAN": int(m.group(2)),
        "Mode": m.group(3),
        "Power": float(val),
    })
dfp = pd.DataFrame(rec)

# --- Altitude style (consistent across both figures) ---
ALT_PALETTE = {500: "#aec7e8", 600: "#ffbb78"}  # pastel blue/orange
ALT_HATCH   = {500: "//", 600: "\\\\"}
EDGE = "black"; LW = 0.5

def save_grouped_by_ltan_with_alt_pairs(filename):
    dfa = dfp.copy()
    ltan_order = sorted(dfa["LTAN"].unique())
    mode_order = sorted(dfa["Mode"].unique())
    alt_order  = [500, 600]

    bar_w = 0.08
    pair_gap = 0.015
    mode_gap = 0.05
    group_gap = 0.20

    bars = []
    x_cursor = 0.0

    for lt in ltan_order:
        for mode in mode_order:
            for i, alt in enumerate(alt_order):
                x = x_cursor + i * (bar_w + pair_gap)
                v = dfa[(dfa["LTAN"] == lt) & (dfa["Mode"] == mode) & (dfa["Altitude"] == alt)]["Power"].values
                y = float(v[0]) if v.size else 0.0
                bars.append((x, y, ALT_PALETTE[alt], ALT_HATCH[alt]))
            x_cursor += 2*(bar_w + pair_gap) + mode_gap
        x_cursor += group_gap

    # Plot
    plt.figure(figsize=(14, 6))
    for x, h, c, hch in bars:
        plt.bar(x, h, width=bar_w, color=c, edgecolor=EDGE, linewidth=LW, hatch=hch)

    # X ticks per LTAN group
    group_centers = []
    cursor = 0.0
    per_mode_span = 2*(bar_w + pair_gap) + mode_gap
    group_span = len(mode_order)*per_mode_span - mode_gap
    for lt in ltan_order:
        group_centers.append(cursor + group_span/2.0)
        cursor += group_span + group_gap

    plt.xticks(group_centers, [f"LTAN {lt}" for lt in ltan_order])
    plt.xlabel("LTAN (modes grouped within each)")
    plt.ylabel("Average Power per Orbit [W]")
    plt.title("Average Power per Orbit — Altitude Pairs Within Each Mode (Grouped by LTAN)")
    plt.grid(axis="y", linestyle="--", alpha=0.7)

    handles = [plt.Rectangle((0,0),1,1, color=ALT_PALETTE[a], ec=EDGE, lw=LW, hatch=ALT_HATCH[a]) for a in alt_order]
    plt.legend(handles, [f"{a} km" for a in alt_order], title="Altitude", loc="best")

    plt.tight_layout()
    plt.savefig(filename, dpi=300)
    plt.close()
    print(f"Saved {filename}")

def save_grouped_by_mode_with_alt_pairs(filename):
    dfa = dfp.copy()
    mode_order = sorted(dfa["Mode"].unique())
    ltan_order = sorted(dfa["LTAN"].unique())
    alt_order  = [500, 600]

    bar_w = 0.08
    pair_gap = 0.015
    ltan_gap = 0.05
    group_gap = 0.20

    bars = []
    x_cursor = 0.0

    for mode in mode_order:
        for lt in ltan_order:
            for i, alt in enumerate(alt_order):
                x = x_cursor + i * (bar_w + pair_gap)
                v = dfa[(dfa["Mode"] == mode) & (dfa["LTAN"] == lt) & (dfa["Altitude"] == alt)]["Power"].values
                y = float(v[0]) if v.size else 0.0
                bars.append((x, y, ALT_PALETTE[alt], ALT_HATCH[alt]))
            x_cursor += 2*(bar_w + pair_gap) + ltan_gap
        x_cursor += group_gap

    plt.figure(figsize=(14, 6))
    for x, h, c, hch in bars:
        plt.bar(x, h, width=bar_w, color=c, edgecolor=EDGE, linewidth=LW, hatch=hch)

    # X ticks per mode group
    group_centers = []
    cursor = 0.0
    per_ltan_span = 2*(bar_w + pair_gap) + ltan_gap
    group_span = len(ltan_order)*per_ltan_span - ltan_gap
    for mode in mode_order:
        group_centers.append(cursor + group_span/2.0)
        cursor += group_span + group_gap

    plt.xticks(group_centers, mode_order, rotation=25, ha="right")
    plt.xlabel("Operational Mode (LTAN subgroups inside each; altitude pairs per subgroup)")
    plt.ylabel("Average Power per Orbit [W]")
    plt.title("Average Power per Orbit — Altitude Pairs Within Each LTAN (Grouped by Mode)")
    plt.grid(axis="y", linestyle="--", alpha=0.7)

    handles = [plt.Rectangle((0,0),1,1, color=ALT_PALETTE[a], ec=EDGE, lw=LW, hatch=ALT_HATCH[a]) for a in alt_order]
    plt.legend(handles, [f"{a} km" for a in alt_order], title="Altitude", loc="best")

    plt.tight_layout()
    plt.savefig(filename, dpi=300)
    plt.close()
    print(f"Saved {filename}")

# --- Build both comparison figures ---
save_grouped_by_ltan_with_alt_pairs("power_by_ltan_alt_pairs.png")
save_grouped_by_mode_with_alt_pairs("power_by_mode_alt_pairs.png")
