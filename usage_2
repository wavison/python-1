import pandas as pd
import os
import glob
import re
import numpy as np

# === Configuration ===
folder_path = "power_generation"
output_csv = "merged_power_generation_normalized.csv"

# === Simplify file names ===
def simplify_filename(filename):
    base = os.path.basename(filename).replace(".csv", "").lower()
    base = re.sub(r'min_orbit_', 'min_', base)
    base = re.sub(r'_ltan_', 'ltan', base)
    base = re.sub(r'_output_', '_', base)
    base = re.sub(r'[^a-z0-9]+', '_', base)
    base = re.sub(r'_+', '_', base)
    return base.strip('_')

# === Columns to process ===
columns_to_keep = [
    "POWER_GENERATION_WATTS", "ROLL_DEG", "PITCH_DEG",
    "YAW_DEG", "Q0", "Q1", "Q2", "Q3"
]

# === Read and normalize all files ===
normalized_dfs = []
max_rows = 0

csv_files = sorted(glob.glob(os.path.join(folder_path, "min*.csv")))

for file_path in csv_files:
    try:
        df = pd.read_csv(file_path)
        if "ELAPSED_TIME_SEC" not in df.columns:
            continue
        tag = simplify_filename(file_path)

        df = df[["ELAPSED_TIME_SEC"] + columns_to_keep].dropna().reset_index(drop=True)

        n = len(df)
        if n > max_rows:
            max_rows = n

        # Use minute-based elapsed time
        elapsed_minutes = np.arange(n)  # 0, 1, 2, ..., n-1
        norm_df = pd.DataFrame({"ELAPSED_TIME_MIN": elapsed_minutes})

        for col in columns_to_keep:
            norm_df[f"{tag}_{col}"] = df[col].values

        normalized_dfs.append(norm_df)

    except Exception as e:
        print(f"Error processing {file_path}: {e}")

# === Merge by row index ===
if normalized_dfs:
    merged_df = normalized_dfs[0]
    for df in normalized_dfs[1:]:
        merged_df = pd.merge(merged_df, df, on="ELAPSED_TIME_MIN", how="outer")

    merged_df.to_csv(output_csv, index=False)
    print(f"✅ Time-normalized merged file saved to '{output_csv}'")
else:
    print("⚠️ No valid files processed.")
