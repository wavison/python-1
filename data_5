import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

# === CONFIG FOR S-BAND (Satlab SRS-4) ===
input_csv = "data_budget_plots/scenario_totals_MB.csv"  # Adjust if needed
symbol_rate = 5  # Msps for BPSK
spectral_eff = 1.0  # BPSK = 1 bps/Hz
rs_eff = 223 / 255  # Reed-Solomon efficiency
crc_eff = 0.956     # CRC overhead
cc_rate = 0.5       # Convolutional code rate
total_eff = rs_eff * crc_eff * cc_rate  # Overall payload efficiency
net_rate = symbol_rate * spectral_eff * total_eff  # Net usable Mbps

pass_durations = [5*60, 10*60, 15*60]  # seconds
output_folder = "data_budget_plots"
chart_filename = "x_failure_sband_feasibility.png"
results_csv_filename = "x_failure_sband_feasibility.csv"

# === LOAD CSV AND FILTER FOR 'X Failure' ===
df = pd.read_csv(input_csv)
df_x_failure = df[df["Scenario"] == "X Failure"]

if df_x_failure.empty:
    raise ValueError("No scenario found named 'X Failure' in the input CSV.")

# === CALCULATE TRANSFER FEASIBILITY ===
download_results = []
for _, row in df_x_failure.iterrows():
    scenario = row["Scenario"]
    total_data = row["Total_Daily_MB"]
    for duration in pass_durations:
        available_data = net_rate * duration / 8  # Convert to MB
        pct_downloaded = min(100.0, (available_data / total_data) * 100)
        download_results.append({
            "Scenario": scenario,
            "PassDuration_min": duration // 60,
            "Available_MB": round(available_data, 1),
            "Required_MB": total_data,
            "Pct_Transferred": round(pct_downloaded, 1)
        })

df_result = pd.DataFrame(download_results)

# === PLOT CHART ===
fig, ax = plt.subplots(figsize=(8, 6))
for duration in sorted(df_result["PassDuration_min"].unique()):
    subset = df_result[df_result["PassDuration_min"] == duration]
    ax.bar(f"{duration} min", subset["Pct_Transferred"].values[0], label=f"{duration} min")

ax.axhline(100, color="gray", linestyle="--", linewidth=1)
ax.set_ylabel("% of Data Transferred")
ax.set_title("X Failure Scenario - S-band (Satlab SRS-4) Transfer Feasibility")
plt.ylim(0, 110)
plt.legend(title="Pass Duration")
plt.tight_layout()

# === SAVE RESULTS ===
os.makedirs(output_folder, exist_ok=True)
chart_path = os.path.join(output_folder, chart_filename)
csv_path = os.path.join(output_folder, results_csv_filename)

plt.savefig(chart_path, dpi=300)
plt.close()
df_result.to_csv(csv_path, index=False)

print(f"✅ Chart saved to: {chart_path}")
print(f"✅ Results saved to: {csv_path}")
