# Aggregating power orbit data from operational outputs

import os
import pandas as pd
import re

# Config
input_folder = "_all_modes"
output_csv = "aggregated_power_orbit_table_all_modes.csv"

# Files
files = [f for f in os.listdir(input_folder) if f.endswith("_output.txt")]

# Ordered metrics for final table
ordered_metrics = [
    "ECLIPSE ORBIT PERCENTAGE [%]",
    "SUNLIGHT DURATION [s]",
    "SUNLIGHT ORBIT PERCENTAGE [%]",
    "AVERAGE POWER PER SUNLIGHT [W]",
    "AVERAGE POWER PER ORBIT [W]",
    "AVERAGE POWER PER SUNLIGHT [W],PERCENTAGE OF ORBITS [%]",
    "AVERAGE POWER PER ORBIT [W],PERCENTAGE OF ORBITS [%]"
]

data = {}

for file in files:
    file_path = os.path.join(input_folder, file)
    with open(file_path, "r") as f:
        lines = [line.strip() for line in f if line.strip()]

    values = {}
    i = 0
    while i < len(lines):
        line = lines[i]
        if line in ordered_metrics[:5]:  # metrics with average/min/max
            # Find average value
            j = i + 1
            while j < len(lines) and "AVERAGE" not in lines[j]:
                j += 1
            if j < len(lines):
                avg_match = re.search(r"AVERAGE\s*=\s*([-+]?[0-9]*\.?[0-9]+)", lines[j])
                if avg_match:
                    values[line] = round(float(avg_match.group(1)), 1)
            i = j + 1
        elif line in ordered_metrics[5:]:  # table metrics
            # Get the highest percentage (â‰ˆ99%)
            j = i + 1
            max_percentage_val = None
            while j < len(lines) and "," in lines[j]:
                val, perc = lines[j].split(",")
                if float(perc) >= 99:
                    max_percentage_val = round(float(val), 1)
                    break
                j += 1
            if max_percentage_val is not None:
                values[line] = max_percentage_val
            i = j + 1
        else:
            i += 1

    data[file] = values

# Create DataFrame with files as columns and metrics as rows
df = pd.DataFrame(data)
df = df.reindex(ordered_metrics)  # enforce row order

# Save CSV
df.to_csv(output_csv)
print(f"Aggregated table saved to {output_csv}")
