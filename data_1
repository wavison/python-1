import pandas as pd
import matplotlib.pyplot as plt
import os

# === CONFIGURATION ===
csv_file = "data_budget_scenarios.csv"  # Input CSV
include_platform = False  # Set to True to include platform telemetry
output_folder = "data_budget_plots"
output_chart = "daily_data_budget.png"
output_csv = "scenario_totals_MB.csv"

# === LOAD AND PREPROCESS ===
df = pd.read_csv(csv_file)
df_melted = df.melt(id_vars="Item", var_name="Scenario", value_name="Daily_MB")

# Optionally remove platform data
if not include_platform:
    df_melted = df_melted[df_melted["Item"] != "Platform"]

# Pivot for charting
pivot_table = df_melted.pivot(index="Scenario", columns="Item", values="Daily_MB").fillna(0)

# === TOTAL DAILY DATA CALCULATION ===
total_per_scenario = pivot_table.sum(axis=1).reset_index()
total_per_scenario.columns = ["Scenario", "Total_Daily_MB"]
print("\nTotal Daily Data Volume per Scenario (MB):")
print(total_per_scenario)

# === OUTPUT FOLDER SETUP ===
os.makedirs(output_folder, exist_ok=True)
chart_path = os.path.join(output_folder, output_chart)
csv_output_path = os.path.join(output_folder, output_csv)

# === SAVE STACKED BAR CHART ===
ax = pivot_table.plot(kind="bar", stacked=True, figsize=(10, 6), colormap="tab20")
plt.ylabel("Daily Data Volume (MB)")
plt.title("Daily Payload Data Budget per Scenario" + (" (with Platform)" if include_platform else " (Payloads Only)"))
plt.xticks(rotation=0)
plt.legend(title="Item", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.grid(axis="y")
plt.savefig(chart_path, dpi=300)
plt.close()

# === SAVE TOTALS TO CSV ===
total_per_scenario.to_csv(csv_output_path, index=False)

print(f"\nChart saved to: {chart_path}")
print(f"Scenario totals CSV saved to: {csv_output_path}")




import pandas as pd
import matplotlib.pyplot as plt
import os

# === CONFIGURATION ===
csv_file = "data_budget_scenarios.csv"       # Input CSV
include_platform = False                     # Include platform data?
margin_fraction = 0.10                       # 10% default margin
output_folder = "data_budget_plots"
output_chart = "daily_data_budget.png"
output_csv = "scenario_totals_MB.csv"

# === LOAD AND PREPROCESS ===
df = pd.read_csv(csv_file)
df_melted = df.melt(id_vars="Item", var_name="Scenario", value_name="Daily_MB")

# Optionally remove platform data
if not include_platform:
    df_melted = df_melted[df_melted["Item"] != "Platform"]

# Pivot for charting
pivot_table = df_melted.pivot(index="Scenario", columns="Item", values="Daily_MB").fillna(0)

# === APPLY MARGIN & TOTALS ===
total_per_scenario = pivot_table.sum(axis=1).reset_index()
total_per_scenario.columns = ["Scenario", "Total_Daily_MB"]
total_per_scenario["Total_Daily_MB"] *= (1 + margin_fraction)

print("\nTotal Daily Data Volume per Scenario with {:.0f}% Margin (MB):".format(margin_fraction * 100))
print(total_per_scenario)

# === OUTPUT FOLDER SETUP ===
os.makedirs(output_folder, exist_ok=True)
chart_path = os.path.join(output_folder, output_chart)
csv_output_path = os.path.join(output_folder, output_csv)

# === SAVE STACKED BAR CHART ===
ax = pivot_table.plot(kind="bar", stacked=True, figsize=(10, 6), colormap="tab20")
plt.ylabel("Daily Data Volume (MB)")
plt.title("Daily Payload Data Budget per Scenario" + 
          (" (with Platform)" if include_platform else " (Payloads Only)") +
          f" + {int(margin_fraction * 100)}% Margin")
plt.xticks(rotation=0)
plt.legend(title="Item", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.grid(axis="y")
plt.savefig(chart_path, dpi=300)
plt.close()

# === SAVE TOTALS TO CSV ===
total_per_scenario.to_csv(csv_output_path, index=False)

print(f"\nChart saved to: {chart_path}")
print(f"Scenario totals CSV saved to: {csv_output_path}")

